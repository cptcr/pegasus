version: '3.9'

services:
  postgres:
    image: postgres:16-alpine
    container_name: pegasus-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-pegasus}
      POSTGRES_USER: ${POSTGRES_USER:-pegasus}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - pegasus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: pegasus-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis-data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - pegasus-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pegasus-bot
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgresql://${POSTGRES_USER:-pegasus}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-pegasus}?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379
      ENABLE_API: ${ENABLE_API:-true}
      API_PORT: ${API_PORT:-2000}
    ports:
      - "${API_PORT:-2000}:2000"
    networks:
      - pegasus-network
    volumes:
      - ./logs:/app/logs
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 512M

  # Optional: Database management UI
  adminer:
    image: adminer:latest
    container_name: pegasus-adminer
    restart: unless-stopped
    profiles: ["dev"]
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    networks:
      - pegasus-network
    depends_on:
      - postgres
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha

networks:
  pegasus-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local