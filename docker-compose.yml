version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: pegasus
      POSTGRES_USER: pegasus
      POSTGRES_PASSWORD: pegasus_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pegasus"]
      interval: 10s
      timeout: 5s
      retries: 5

  bot:
    build:
      context: .
      target: production
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://pegasus:pegasus_password@postgres:5432/pegasus
      HEALTH_CHECK_PORT: 3000
      ENABLE_MONITORING: "true"
    env_file:
      - .env
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./backups:/app/backups
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  bot-dev:
    build:
      context: .
      target: development
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://pegasus:pegasus_password@postgres:5432/pegasus
      HEALTH_CHECK_PORT: 3000
    env_file:
      - .env
    ports:
      - "3001:3000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    profiles:
      - dev

volumes:
  postgres_data:
COMPOSE_EOF < /dev/null
